// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/base/base.proto

/*
Package go_micro_srv_tenno_ucenter is a generated protocol buffer package.

It is generated from these files:
	proto/base/base.proto

It has these top-level messages:
	GetRequest
	SetRequest
	Response
*/
package go_micro_srv_tenno_ucenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Base service

type BaseService interface {
	GetUserInfo(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error)
	SetUserInfo(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*Response, error)
}

type baseService struct {
	c    client.Client
	name string
}

func NewBaseService(name string, c client.Client) BaseService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.tenno.ucenter"
	}
	return &baseService{
		c:    c,
		name: name,
	}
}

func (c *baseService) GetUserInfo(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Base.GetUserInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseService) SetUserInfo(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Base.SetUserInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Base service

type BaseHandler interface {
	GetUserInfo(context.Context, *GetRequest, *Response) error
	SetUserInfo(context.Context, *SetRequest, *Response) error
}

func RegisterBaseHandler(s server.Server, hdlr BaseHandler, opts ...server.HandlerOption) error {
	type base interface {
		GetUserInfo(ctx context.Context, in *GetRequest, out *Response) error
		SetUserInfo(ctx context.Context, in *SetRequest, out *Response) error
	}
	type Base struct {
		base
	}
	h := &baseHandler{hdlr}
	return s.Handle(s.NewHandler(&Base{h}, opts...))
}

type baseHandler struct {
	BaseHandler
}

func (h *baseHandler) GetUserInfo(ctx context.Context, in *GetRequest, out *Response) error {
	return h.BaseHandler.GetUserInfo(ctx, in, out)
}

func (h *baseHandler) SetUserInfo(ctx context.Context, in *SetRequest, out *Response) error {
	return h.BaseHandler.SetUserInfo(ctx, in, out)
}
