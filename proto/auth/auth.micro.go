// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth/auth.proto

/*
Package go_micro_srv_tenno_ucenter is a generated protocol buffer package.

It is generated from these files:
	proto/auth/auth.proto

It has these top-level messages:
	LoginRequest
	SDKLoginRequest
	CheckRequest
	LogoutRequest
	SmsRequest
	Response
*/
package go_micro_srv_tenno_ucenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthService interface {
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*Response, error)
	SDKLogin(ctx context.Context, in *SDKLoginRequest, opts ...client.CallOption) (*Response, error)
	Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*Response, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*Response, error)
	SendSMS(ctx context.Context, in *SmsRequest, opts ...client.CallOption) (*Response, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.tenno.ucenter"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auth.Login", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) SDKLogin(ctx context.Context, in *SDKLoginRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auth.SDKLogin", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auth.Check", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auth.Logout", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) SendSMS(ctx context.Context, in *SmsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auth.SendSMS", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Login(context.Context, *LoginRequest, *Response) error
	SDKLogin(context.Context, *SDKLoginRequest, *Response) error
	Check(context.Context, *CheckRequest, *Response) error
	Logout(context.Context, *LogoutRequest, *Response) error
	SendSMS(context.Context, *SmsRequest, *Response) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		Login(ctx context.Context, in *LoginRequest, out *Response) error
		SDKLogin(ctx context.Context, in *SDKLoginRequest, out *Response) error
		Check(ctx context.Context, in *CheckRequest, out *Response) error
		Logout(ctx context.Context, in *LogoutRequest, out *Response) error
		SendSMS(ctx context.Context, in *SmsRequest, out *Response) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) Login(ctx context.Context, in *LoginRequest, out *Response) error {
	return h.AuthHandler.Login(ctx, in, out)
}

func (h *authHandler) SDKLogin(ctx context.Context, in *SDKLoginRequest, out *Response) error {
	return h.AuthHandler.SDKLogin(ctx, in, out)
}

func (h *authHandler) Check(ctx context.Context, in *CheckRequest, out *Response) error {
	return h.AuthHandler.Check(ctx, in, out)
}

func (h *authHandler) Logout(ctx context.Context, in *LogoutRequest, out *Response) error {
	return h.AuthHandler.Logout(ctx, in, out)
}

func (h *authHandler) SendSMS(ctx context.Context, in *SmsRequest, out *Response) error {
	return h.AuthHandler.SendSMS(ctx, in, out)
}
